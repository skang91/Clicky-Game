{"version":3,"sources":["components/navbar.js","components/header.js","components/card.js","components/cardcontainer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","href","id","score","top","Header","Card","src","alt","onClick","handleClick","CardContainer","e","target","exists","state","selectedfriends","forEach","kakaofriend","endGame","kakaofriends","setState","console","log","updateScore","shuffle","updateCurrentScore","updateTopScore","Kakaofriends","map","image","key","name","Component","App","count","topScore","newCount","newTop","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.67e0c8fb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = props => (\n    <nav className=\"navbar navbar-expand-lg navbar-dark fixed-top bg-dark\">\n        <a className=\"navbar-brand\" href=\"/\" id=\"logo\"><h3>Clicky Game</h3></a>\n        <h5 className=\"ml-auto mt-2\" id=\"counters\">Score: {props.score}  |  Top score: {props.top} </h5>\n    </nav>\n)\n\nexport default Navbar;","import React from 'react';\n\nconst Header = props => (\n    <div className=\"container text-center\" id=\"header-container\">\n    <h5 className=\"subtitle\">Click on an image to earn points, but don't click on any more than once! After each click, the images will shuffle.</h5>\n    </div>\n)\n\nexport default Header;","import React from 'react';\n\nconst Card = props => (\n    <div className=\"col-md-3\">\n        <div className=\"card mb-5\">\n            <img className=\"card-img-top\" src={props.src} alt={props.alt} onClick={props.handleClick} id={props.id}/>\n        </div>\n    </div>\n)\n\nexport default Card;","import React, {Component} from 'react';\nimport Card from './card';\nimport Kakaofriends from \"../kakaofriend.json\"\nimport shuffle from \"shuffle-array\";\n\nclass CardContainer extends Component {\n    constructor(props) {\n        super(props);\n        // setting the score and pulling json\n        this.state = {\n            score: 1,\n            kakaofriends: Kakaofriends,\n            selectedfriends: []\n        };\n    }\n\n    // when the user clicks\n    handleClick = (e) => {\n        // grab the id\n        let id = e.target.id;\n        let exists = false;\n        this.state.selectedfriends.forEach(kakaofriend => {\n            // if id matches\n            if (kakaofriend.id == id) {\n                exists = true;\n            }\n        })\n        // if exists is true\n        if (exists) {\n            // end the game\n            this.endGame();\n        }\n        // otherwise\n        else {\n            // loop through the json\n            this.state.kakaofriends.forEach(kakaofriend => {\n                if (kakaofriend.id == id) {\n                    // add to the selected array\n                    this.setState({selectedfriends: [...this.state.selectedfriends,kakaofriend]});\n                    console.log(this.state.selectedfriends);\n                    // update the score\n                    this.updateScore();\n                }\n            })  \n        }\n        \n        // SHUFFLE\n        this.setState({ kakaofriends: shuffle(this.state.kakaofriends)});\n        console.log(\"Shuffling\");\n    }\n\n    // Update game's score\n    updateScore = () => {\n        // new score\n        this.setState({score: this.state.score + 1});\n        // update score\n        this.props.updateCurrentScore(this.state.score);\n        console.log(\"Score: \" + this.state.score);\n    }\n\n    // End game\n    endGame = () => {\n        console.log(\"End!\");\n        this.props.updateTopScore(this.state.score);\n        this.setState({score: 1, selectedfriends: []});\n        this.props.updateCurrentScore(0);\n    }\n    render() {\n        return (\n            <div className=\"container\" id=\"card-container\">\n                <div className=\"row\">\n                    {Kakaofriends.map(kakaofriend => <Card src={kakaofriend.image} key={kakaofriend.id} id={kakaofriend.id} alt={kakaofriend.name} endGame={this.endGame} handleClick={this.handleClick} score={this.state.score} />)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CardContainer;","import React, { Component} from 'react';\nimport './App.css';\nimport Navbar from \"./components/navbar\";\nimport Header from \"./components/header\";\nimport CardContainer from \"./components/cardcontainer\"\n\nclass App extends Component {\n  // the state\n  state = {\n    count: 0,\n    topScore: 0\n  }\n  // current score\n  updateCurrentScore = (newCount) => {\n    this.setState({count: newCount});\n  }\n\n  // top score\n  updateTopScore = (newTop) => {\n    // if the new top score is higher than the current\n    if (newTop > this.state.topScore) {\n      // then set the state but you have to subtract 1\n      this.setState({topScore: newTop - 1})\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.count} top={this.state.topScore}/>\n        <Header/>\n        <CardContainer updateCurrentScore={this.updateCurrentScore} updateTopScore={this.updateTopScore}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}